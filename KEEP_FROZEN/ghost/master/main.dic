OnTranslate
{
	_talk = reference0
	
	//This is what makes %(embedded_elements) work in script input
	if reference1 == "" && reference2 == "" //If this is from the input box
	{ //send input box : no event (ref2) , no special flag (ref1)
		_talk = EVAL('"' + REPLACE(_talk,'"','""') + '"')
	}
	
	TOSTR(_talk)
}

OnFirstBoot
{
	// meltphase = 0
	// cubelifestart = GETSECCOUNT
	// phasecountdown = GETSECCOUNT
	CubeLives = IARRAY //Time counts of all cubes over time
	ItemsCollected = IARRAY
	foreach ItemMasterList; _item
	{
		ItemsCollected ,= "%(_item),0"
	}
}

OnInitialize
{
	if reference0 != "reload"
	{
		meltphase = 0
		cubelifestart = GETSECCOUNT
		phasecountdown = GETSECCOUNT
		AvailableItems = ItemMasterList
	}
}

OnDestroy
{
	if reference0 != "reload"
	{
		SaveCubeTime
	}
}

SaveCubeTime
{
	_sec = GETSECCOUNT
	_time = _sec - cubelifestart
	CubeLives ,= _time
}

OnBoot
{
	s("new")
	--
	"boot (to the head)"
}

OnMouseDoubleClick : all
{
	// meltphase = 0
	// phasecountdown = GETSECCOUNT
	// "%(s)"
	
	"\0\*\b2\![set,autoscroll,disable]%(s)"
	
	if meltphase == 1 || meltphase == 2
	{
		"Please put me in the freezer.\_q"
		"\n\n\![*]\q[Ok,OnFreezeCube]  \![*]\q[No,cancel]\n\n"
	}
	else; "\_q"
	
	if meltphase == 3 && CurrentItem != ""; "\![*]\_a[OnCollectItem]Collect item\_a\n"
	else; "\![*]\__q[OnCollectionView]View collection\__q\n"
	"\![*]\__q[OnStats]View stats\__q\n\n"
	
	"\![*]\__q[OnNewCube]Get a new ice cube\__q\n\n"
	"\![*]\__q[OnSettings]Settings\__q\n\n"
	
	"\![*]\q[Cancel,cancel]"
}

OnSettings : all
{
	_talkrate = "Off"
	if aitalkinterval == 30; _talkrate = "30 seconds"
	elseif aitalkinterval == 60; _talkrate = "1 minute"
	elseif aitalkinterval == 180; _talkrate = "3 minutes"
	elseif aitalkinterval == 300; _talkrate = "5 minutes"
	elseif aitalkinterval == 600; _talkrate = "10 minutes"
	
	"\0\*\b2\![set,autoscroll,disable]\_q\f[anchorvisitedfontcolor,default.anchor]"
	"\f[align,center]Settings\n\n\f[align,left]"
	
	"Talkrate: \_a[OnTalkRateMenu]%(_talkrate)\_a\n\n"
	"\![*]\f[bold,1]\q[Reset,OnResetCheck]\f[bold,default]\n\n"
	"\![*]\q[Back,OnMouseDoubleClick]  \![*]\q[Close,cancel]"
}

OnTalkRateMenu : all
{	
	//This is just setting up a label, you may need to add to it or tweak it if you change what rates are available
	_talkrate = "Off"
	if aitalkinterval == 30; _talkrate = "30 seconds"
	elseif aitalkinterval == 60; _talkrate = "1 minute"
	elseif aitalkinterval == 180; _talkrate = "3 minutes"
	elseif aitalkinterval == 300; _talkrate = "5 minutes"
	elseif aitalkinterval == 600; _talkrate = "10 minutes"
	
	"\0\b2\![set,autoscroll,disable]\_q"
	"Current interval: %(_talkrate)\n\n"
	
	"\![*]\q[Off,OnTalkRateChange,0]\n"
	"\![*]\q[30 seconds,OnTalkRateChange,30]\n"
	"\![*]\q[1 minute,OnTalkRateChange,60]\n"
	"\![*]\q[3 minutes,OnTalkRateChange,180]\n"
	"\![*]\q[5 minutes,OnTalkRateChange,300]\n"
	"\![*]\q[10 minutes,OnTalkRateChange,600]\n"
	"\n"
	"\![*]\q[Back,OnMouseDoubleClick]  \![*]\q[Close,cancel]"
}

OnTalkRateChange
{
	aitalkinterval = TOINT(reference0)
	OnSettings
}

OnResetCheck : all
{
	"\0\b2\![set,autoscroll,disable]\_q"
	"Warning: this will reset all of your stats AND your item collection. This cannot be undone. Do you want to reset?"
	"\n\n\![*]\__q[OnFirstBoot]Yes, reset everything\__q    \![*]\__q[OnSettings]No, don't reset\__q"
}

OnNewCube
{
	SaveCubeTime
	meltphase = 0
	cubelifestart = GETSECCOUNT
	phasecountdown = GETSECCOUNT
	
	s("new")
}

OnFreezeCube
{
	phasecountdown = GETSECCOUNT
	meltphase = 0
	
	s
}

OnCollectItem
{
	"\![bind,Object,,0]"
}

OnCollectionView : all
{
	if reference0 == ""; reference0 = "Fruit"
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\_q\![set,autoscroll,disable]\*\f[align,center]Collection\n\n\f[align,left]"
	
	// _items = ASORT("string,ascending",ItemsCollected)
	// foreach _items; _item
	// {
		// _name = _item[0]
		// _num = TOINT(_item[1])
		
		// if _num > 0
		// {
			// if ASEARCH(_name,DisplayedItems) != -1; "\_a[OnDisplayItem,%(_name),remove]%(_name)\_a"
			// else; "\__q[OnDisplayItem,%(_name),add]%(_name)\__q"
		// }
		// else; "%(_name)"
		
		// ": \f[color,default.anchor]%(_num)\f[color,default]"
		
		// "\n"
	// }
	
	_categories = IARRAY
	_items = ""
	_itemarray = ASORT("string,ascending",ItemDisplayInfo)
	foreach _itemarray; _item
	{
		if _item == ""; continue
		
		if ASEARCH(_item[0],_categories) == -1; _categories ,= _item[0]
		
		if _item[0] == reference0
		{
			_name = _item[1]
			
			_index = -1
			for _i = 0; _i < ARRAYSIZE(ItemsCollected); _i++
			{
				_item = ItemsCollected[_i]
				if _item[0] == _name
				{
					_index = _i
					break
				}
			}
			//_index = ASEARCH(_name,ItemsCollected)
			_num = TOINT(ItemsCollected[_index][1])
			//_num = TOINT(_item[2])
			
			if _num > 0
			{
				if ASEARCH(_name,DisplayedItems) != -1; _items += "\_a[OnDisplayItem,%(_name),remove,%(reference0)]%(_name)\_a"
				else; _items += "\__q[OnDisplayItem,%(_name),add,%(reference0)]%(_name)\__q"
			}
			else; _items += "%(_name)"
			
			_items += ": \f[color,default.anchor]%(_num)\f[color,default]"
			
			_items += "\n"
		}
	}
	
	_categories = ASORT("string,ascending",_categories)
	foreach _categories; _category
	{
		if _category == reference0; "\_a[OnCollectionView,%(_category)]%(_category)\_a"
		else; "\__q[OnCollectionView,%(_category)]%(_category)\__q"
		"  "
	}
	"\n\n"
	_items
	
	"\n"
	"\![*]\q[Back,OnMouseDoubleClick]  \![*]\q[Close,cancel]"
	"\![unlock,balloonrepaint]"
}

OnDisplayItem
{
	
	
	if reference1 == "remove"
	{
		_index = ASEARCH(reference0,DisplayedItems)
		if _index != -1
		{
			DisplayedItems[_index] = IARRAY
		}
	}
	else
	{
		DisplayedItems ,= reference0
	}
	"\C"
	--
	s
	--
	"\![raise,OnCollectionView,%(reference2)]"
}



OnStats : all
{
	"\0\b2\*\_q\![set,autoscroll,disable]"
	
	_sec = GETSECCOUNT
	_currentcubelife = _sec - cubelifestart
	
	_longestcube = MAX(CubeLives)
	_avgcube = AVERAGE(CubeLives)
	_totalcube = SumArray(CubeLives)
	_cubenum = ARRAYSIZE(CubeLives)
	
	_itemnum = 0
	foreach ItemsCollected; _item
	{
		_itemnum += TOINT(_item[1])
	}
	
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	
	"\f[align,center]Statistics\n\n\f[align,left]"
	"Current cube lifespan: %(_h)%(FormatTime(_currentcubelife))%(_d)\n"
	"Longest cube lifespan: %(_h)%(FormatTime(_longestcube))%(_d)\n"
	"Average cube lifespan: %(_h)%(FormatTime(_avgcube))%(_d)\n"
	"Total cube lifespan: %(_h)%(FormatTime(_totalcube))%(_d)\n"
	"Total # of cubes: %(_h)%(_cubenum)%(_d)\n"
	"Items collected: %(_h)%(_itemnum)%(_d)\n\n"
	
	"\![*]\q[Back,OnMouseDoubleClick]  \![*]\q[Close,cancel]"
}

//Take minutes and turn it into an hours:minutes display
FormatTime
{
	_mins = _argv[0] / 60
	_hours = _mins / 60
	_minutes = TOSTR(_mins % 60)
	
	if STRLEN(_minutes) < 2; _minutes = "0" + _minutes
	
	"%(_hours):%(_minutes)"
}

SumArray
{
	_sum = 0
	foreach _argv; _num
	{
		_sum += _num
	}
	_sum
}

OnSurfaceRestore
{
	s
}

OnWindowStateRestore
{
	s
}

s : all
{
	"\0\s[%(meltphase)]"
	
	// foreach DisplayedItems; _display
	// {
		// _entry = ""
		// for _i = 0; _i < ARRAYSIZE(ItemDisplayInfo); _i++
		// {
			// if ItemDisplayInfo[_i][0] == reference0
			// {
				// _entry = ItemDisplayInfo[_i]
				// break
			// }
		// }
		// "\p[%(_entry[1])]\s[%(_entry[2])]%(s)"
	// }
	LOGGING("====================================================================")
	LOGGING("SHIORI3FW.IsVisible: %(SHIORI3FW.IsVisible)")
	foreach ItemDisplayInfo; _entry
	{
		LOGGING("_entry: %(_entry)")
		if _entry[0] == ""; continue
		_num = TOINT(_entry[2])
		LOGGING("_num: %(_num)")
		LOGGING("ASEARCH(_entry[1],DisplayedItems): %(ASEARCH(_entry[1],DisplayedItems))")
		LOGGING("SHIORI3FW.IsVisible[_num]: %(SHIORI3FW.IsVisible[_num])")
		LOGGING
		
		if ASEARCH(_entry[1],DisplayedItems) != -1
		{
			"\p[%(_num)]\s[%(_entry[3])]"
			
		}
		elseif SHIORI3FW.IsVisible[_num] == 1
		{
			"\p[%(_num)]\s[-1]"
		}
	}
	
	LOGGING("_index: %(_index)")
	LOGGING("GETTYPE(_index): %(GETTYPE(_index))")
	
	

	
	"\0"
	if _argv[0] == "new"
	{
		_item = ANY(AvailableItems)
		AvailableItems[LSO] = IARRAY
		if ARRAYSIZE(AvailableItems) == 0; AvailableItems = ItemMasterList
		"\![bind,Object,,0]\![bind,Object,%(_item),1]"
	}
}

OnMinuteChange
{
	_sec = GETSECCOUNT
	_time = _sec - phasecountdown
	
	_newphase = 0
	case _time
	{
		when 0-1200 //Full
		{
			_newphase = 0
		}
		when 1201-2100 //Mid
		{
			_newphase = 1
		}
		when 2101-2700 //Tiny
		{
			_newphase = 2
		}
		others //Puddle
		{
			_newphase = 3
		}
	}
	
	if _newphase != meltphase
	{
		meltphase = _newphase
		
		//Add item to collection
		if meltphase == 3
		{
			_found = 0
			for _i = 0; _i < ARRAYSIZE(ItemsCollected); _i++
			{
				_item = ItemsCollected[_i]
				LOGGING("_item: %(_item)")
				LOGGING("ItemsCollected[_i]: %(ItemsCollected[_i])")
				if _item[0] == CurrentItem
				{
					LOGGING("MADE IT")
					AddToCollection(_i)
					_found = 1
					break
				}
			}
			
			//Initialize if not found
			if _found == 0
			{
				ItemsCollected ,= "%(CurrentItem),1"
			}
			SaveCubeTime
		}
		
		if OpenBalloon; "\C"
		--
		s
	}
	
	
	
	//1200 - 20 mins
	//2100 - 20 mins + 15 mins
	//2700 - 20 mins + 15 mins + 10 mins
	
	
	//0 - ded
	//600 - 10 mins
	//1500 - 10 mins + 15 mins
	//2700 - 10 mins + 15 mins + 20 mins
}

AddToCollection
{
	LOGGING("ADD TO COLLECTION")
	_i = _argv[0]
	LOGGING("_i: %(_i)")
	_item = ItemsCollected[_i]
	LOGGING("_item: %(_item)")
	_num = TOINT(_item[1]) + 1
	LOGGING("_num: %(_num)")
	_item[1] = TOSTR(_num)
	LOGGING("_item: %(_item)")
	ItemsCollected[_i] = _item
}

OpenBalloon
{
	if "balloon" _in_ var.req.value[ASEARCH("Status",var.req.key)]; 1
	else; 0
}

//[character ID, category name, part name, option, on-1/off-0, thumbnail path]
OnNotifyDressupInfo
{
	ItemMasterList = IARRAY
	CurrentItem = ""
	foreach reference; _dressup
	{
		_dressup = SPLIT(_dressup,C_BYTE1)
		if _dressup[1] != "Object"; continue
		
		ItemMasterList ,= _dressup[2]
		
		if _dressup[4] == "1"; CurrentItem = _dressup[2]
	}
}



bullet
{
	"\f[name,calibri]â€¢\f[name,default]"
}

OnKeyPress
{
	if reference0 == "t"; "\![raise,OnAiTalk]"
}



/*

TODO note to self: need to probably fix the behavior where, the instant something melts, you can instantly display it even tho you only have 1... idk how to approach fixing that right now ðŸ˜… will mull it over

When booting, should refresh to a fresh piece of ice with a random object

Random object probably a dressup... maybe

menu needs to have an option to get a new ice cube at all times
if ice is partially melted, option to put it in the freezer, which makes it full again

if ice gets totally melted, it is dead, and the only option is to get a new one
??? collect items???

timer that tracks how long your current cube has lasted and how long your best streak was
possibly your average cube time also?

things that can be frozen should only be an option if the cube is partially melted. possibly i may want to make the envelopes into embeds

balloon a sheet of ice, maybe with edges that get wobbly as it goes on? would be nice. just a real simple one. dripping online marker would be neat

items to maybe draw:
â€¢ skull
â€¢ shell
â€¢ necklace
â€¢ sword
â€¢ marble
â€¢ egg
â€¢ Dice
â€¢ Key


*/



/*

Things that are cold:
"Snow"
"Ice"
"Frozen Fish"
"Frozen Peas"
"Slushies"
"Ice Cream"
"Frozen Carrots"
"Frozen Potatoes"
"Frozen Yogurt"
"Hail"
"Cold Water Fish"
"The Bottom Of The Ocean"
"The Hearts Of Mermaids"
"Toes On A Winter Night When Your Blanket Isn't Long Enough"
"Icicles"
"Refrigerators"
"The North Pole"
"The South Pole"
"Polar Bear Houses"
"Last Night's Dinner That Wasn't Put Away"
"Blizzards"
"Ice Cream"
"Frozen Yogurt"
"Polar Bears"
"The Noses Of Polar Bears"
"The Toes Of Polar Bears"
"Seals"
"The Void Of Space"
"Pluto"
"Asteroids"
"Frozen Poptarts"
"Freezerburn"
"Hypothermia"
"Cold Cocoa"
"Iced Tea"
"Iced Coffee"
"The Partner That Isn't A Blanket Hog"
"Mountain Peaks"
"Ice Skates In Use"
"Hockey Pucks"
"Unheld Hands"
"Abandoned Car Engines"
"Penguins"
"Ice Packs Meant For Lunchboxes But Pressed To Your Face Instead To Help With Your Aching Jaw"
"Turtles"
"The Ufos Trapped Deep Inside Of Glaciers"
"The Way The Stars Twinkle And Glitter, So Far Away, Seeing Your Troubles But Not Caring"
"Alaska"
"The Drawers Of Your Fridge"
//"The Dirt 20 Ft Underground" //Todo I Think This Is Not Accurate Actually...
"Fudgepops"
"Revenge"
"The Intentional Space Station"
"A Cursed Girl Drowning At The Bottom Of The Ocean"
"Day Old Flapjacks"
"Metal Countertops"
"Peppermints"
"Unmittened Fingers" //I Have Chosen To Uhhhhhh Be Editorial Lol
"French Fries Left Out Of The Fryer For More Than 5 Minutes"
"Frozen Candy Bars"
"Premade Cookie Dough That Has Just Been Taken Out Of The Fridge"
"Ice Cube Trays In Use"
"Pop/Soda/Soda Pop Cans Sitting In A Bucket Of Ice"
"The Inside Of A Cooler After Putting Frozen Groceries In It"
"Garlic Bread That Has Been Sent To The Edge Of The Atmosphere"
"Rain"
"Clouds"
"Avalanches"
"Snowboarding"
"Skiing"
"Ice Skating"
"Rollerblading On A Windy Day In Autumn"


Things you can freeze:
"Peas"
"Carrots"
"Potatoes"
"Water"
"Milk"
"Spaghetti"
"Ink"
"Orange Juice"
"Apple Juice"
"Prune Juice"
"Cucumber Juice"
"Egg Salad"
"Salsa"
"Food Coloring"
"Ground Beef"
"Ranch Dressing"
"Pudding"
"Jelly"
"Motor Oil"
"Vanilla Extract"
"Hot Chocolate"
"Formerly-Hot Chocolate"
"Jellyfish"

*/