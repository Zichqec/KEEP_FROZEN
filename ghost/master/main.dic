//———————————————————— Boot ————————————————————
OnFirstBoot
{
	CubeLives = IARRAY //Time counts of all cubes over time
	ItemsCollected = IARRAY
	refusals = 0
	RecentItems = IARRAY
	AutoAdjust = 1
	DisplayedItems = IARRAY
	ItemsThatHaveBeenDisplayed = IARRAY
	meltphase = 0
	cubelifestart = GETSECCOUNT
	phasecountdown = GETSECCOUNT
	LastTalk = ""
	CurrentNeedlePokes = 0 //Current
	NeedlePokes = IARRAY //Over time
	CurrentRefusals = 0
	
	foreach ItemMasterList; _item
	{
		ItemsCollected ,= "%(_item),0"
	}
	
	"\0\s[0]\![bind,Object,,0]\![bind,Object,Sea Purple,1]" + BootText
}

OnInitialize
{
	if reference0 != "reload"
	{
		meltphase = 0
		cubelifestart = GETSECCOUNT
		phasecountdown = GETSECCOUNT
		RecentItems = IARRAY
		LastTalk = ""
		CurrentNeedlePokes = 0
		CurrentRefusals = 0
	}
	
	if !ISVAR("AutoAdjust"); AutoAdjust = 1
	if !ISVAR("ItemsThatHaveBeenDisplayed"); ItemsThatHaveBeenDisplayed = IARRAY
	if !ISVAR("NeedlePokes"); NeedlePokes = IARRAY
	if NeedlePokes[0] == ""; NeedlePokes[0] = IARRAY //Fix because I didn't have this initialized right in v1.1.0
}

OnDestroy
{
	if reference0 != "reload"
	{
		if meltphase != 3 && (GETSECCOUNT - cubelifestart) > 300; SaveCubeTime
	}
}

OnBoot
{
	s("new")
	--
	BootText
}

BootText
{
	"\0%(s)\b2KEEP FROZEN\w8\n\nSTORE AT 0°F/-18°C\w8\n\nEXCURSIONS PERMITTED TO 37°F/2.7°C\w8\n\nPRODUCT MAY LEAK OR HAVE CHANGES IN TEXTURE IF ALLOWED TO THAW"
}

OnClose : all
{
	"\0\b2"
	switch meltphase
	{
		"FREEZE FOR 2-4 HOURS AT 0°F/-18°C\w8\n\nFROZEN CUBES SHOULD BE REMOVED FROM ICE TRAY AND STORED IN A SEALED CONTAINER UNTIL USE"
		"Freeze For 4-6 Hours At%(br)0°F/-18°C\w8\n\nFrozen Cubes Should Be Removed From Ice Tray And Stored In A Sealed Container Until Use"
		"freeze for 8-10 hours at%(br)0°f/-18°c\w8\n\nfrozen cubes should be removed from ice tray and stored in a sealed container until use"
	}
	"\w8\w8\w8\-"
}


//———————————————————— Surface related ————————————————————
OnSurfaceRestore
{
	s
}

OnWindowStateRestore
{
	s
}

//Surface refresh
s : all
{
	"\0\s[%(meltphase)]"
	
	//Checking both in case there are ever stragglers that need to be cleaned up
	foreach ItemDisplayInfo; _item
	{
		//If it should be here, make it be here. If it should not be here and it is, make it not be here
		if ASEARCH(_item[1],DisplayedItems) != -1
		{
			"\p[%(_item[2])]\s[%(_item[2])]"
			
		}
		elseif ASEARCH(_item[2],IsVisible) != -1
		{
			"\p[%(_item[2])]\s[-1]"
		}
	}
	
	//Make a list of valid character IDs, and remove any characters that are not of those IDs
	_validIDs = (0)
	foreach ItemDisplayInfo; _item
	{
		_validIDs ,= _item[2]
	}
	
	foreach IsVisible; _char
	{
		if ASEARCH(_char,_validIDs) == -1
		{
			"\p[%(_char)]\s[-1]"
		}
	}
	
	"\0"
	if _argv[0] == "new"
	{
		_newitem = ANY(ItemMasterList)
		while ASEARCH(_newitem,RecentItems) != -1
		{
			_newitem = ANY(ItemMasterList)	
		}
		RecentItems ,= _newitem
		if ARRAYSIZE(RecentItems) > 5; RecentItems[0] = IARRAY
		"\![bind,Object,,0]\![bind,Object,%(_newitem),1]"
	}
}


OnSurfaceChange
{
	_reference = reference2
	_char = reference2[0]
	_surface = reference2[1]
	
	if TOINT(_surface) >= 0
	{
		if ASEARCH(_char,IsVisible) == -1; IsVisible ,= _char
	}
	else
	{
		_elements = ASEARCHEX(_char,IsVisible)
		if ARRAYSIZE(_elements) > 0
		{
			for _i = ARRAYSIZE(_elements) - 1; _i >= 0; _i-- //Goes from the end of the list to the start, so the elements stay in the same positions while we erase
			{
				_current = _elements[_i]
				IsVisible[_current] = IARRAY
			}
		}
	}
}


//[character ID, category name, part name, option, on-1/off-0, thumbnail path]
OnNotifyDressupInfo
{
	ItemMasterList = IARRAY
	CurrentItem = ""
	foreach reference; _dressup
	{
		_dressup = SPLIT(_dressup,C_BYTE1)
		if _dressup[1] != "Object"; continue
		
		ItemMasterList ,= _dressup[2]
		
		if _dressup[4] == "1"; CurrentItem = _dressup[2]
	}
}


//———————————————————— Misc ————————————————————
OnTranslate
{
	_talk = reference0
	
	//This is what makes %(embedded_elements) work in script input
	if reference1 == "" && reference2 == "" //If this is from the input box
	{ //send input box : no event (ref2) , no special flag (ref1)
		_talk = EVAL('"' + REPLACE(_talk,'"','""') + '"')
	}
	
	if "\![is-aitalk]" _in_ _talk && AutoAdjust
	{
		_len = STRLEN(_talk) - STRLEN("\![is-aitalk]")
		
		if _len >= 400; _talk = "\b[4]" + _talk
		elseif _len >= 200; _talk = "\b[2]" + _talk
	}
	
	TOSTR(_talk)
}

OnAiTalk
{
	if CHAIN.IDName == ""
	{
		LastTalk = RandomTalk
	}
	else
	{
		LastTalk = ChainTalk
	}
	LastTalk
}

OnKeyPress
{
	if reference0 == "t"; "\![raise,OnAiTalk]"
	elseif reference0 == "r"; LastTalk
}

OnMouseDoubleClick
{
	if reference5 == 0 && reference3 == 0; OnMainMenu
}

OnSecondChange
{
	_sec = GETSECCOUNT
	_time = _sec - phasecountdown
	
	_newphase = 0
	case _time
	{
		when 0-1199 //Full
		{
			_newphase = 0
		}
		when 1200-2099 //Mid
		{
			_newphase = 1
		}
		when 2100-2699 //Tiny
		{
			_newphase = 2
		}
		others //Puddle
		{
			_newphase = 3
		}
	}
	
	//1200 - 20 mins
	//2100 - 20 mins + 15 mins
	//2700 - 20 mins + 15 mins + 10 mins
	if _newphase != meltphase
	{
		LOGGING("newphase != meltphase")
		meltphase = _newphase
		LOGGING("new meltphase: %(meltphase)")
		//Add item to collection
		if meltphase == 3
		{
			_found = 0
			for _i = 0; _i < ARRAYSIZE(ItemsCollected); _i++
			{
				_item = ItemsCollected[_i]
				if _item[0] == CurrentItem
				{
					AddToCollection(_i)
					_found = 1
					break
				}
			}
			
			//Initialize if not found
			if _found == 0
			{
				ItemsCollected ,= "%(CurrentItem),1"
			}
			SaveCubeTime
		}
		
		if OpenBalloon; "\C"
		--
		s
	}
}

On_homeurl
{
	"https://raw.githubusercontent.com/Zichqec/KEEP_FROZEN/main/"
}

OnNeedlePoke
{
	if !ISVAR("NeedlePokes"); NeedlePokes = IARRAY
	if reference0 == 0
	{
		CurrentNeedlePokes++
		
		_found = 0
		for _i = 0; _i < ARRAYSIZE(NeedlePokes); _i++
		{
			_name = NeedlePokes[_i][0]
			if _name == reference1
			{
				_found = 1
				NeedlePokes[_i] = "%(NeedlePokes[_i][0]),%(TOINT(NeedlePokes[_i][1]) + 1)"
			}
		}
		if !_found
		{
			NeedlePokes ,= "%(reference1),1"
		}
		//NeedlePokes
		if "\f[align,center]Needle Pokes\n\n\f[align,left]" _in_ SHIORI3FW.LastTalk && MenuIsOpen; "\C\![raise,OnNeedlePokeStats]"
	}
}

//As the name implies, this checks if the balloon is currently open with a menu choice or not.
//Will be 0 if a menu is not open, and 1 if a menu is open
MenuIsOpen
{
	"choosing" _in_ var.req.value[ASEARCH("Status",var.req.key)]
}



On_getaistate
{
	if SHIORI3FW.DebugMode
	{
		"%(OUTPUTNUM('ThingsThatAreCold')),/
		%(ARRAYSIZE(ItemDisplayInfo)),/
		%(OUTPUTNUM('sodapop')),/
		" + C_BYTE1 + /
		
		"Things That Are Cold,/
		Items,/
		sodapop,/
		" + C_BYTE1
	}
}

ghostver
{
	"1.1.1"
}